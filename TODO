# TODOS
FEATURES:

  IN PROGRESS:
    Convert to FLAC:
      [ ] replace WEBM encoding w/FLAC encoding (e.g., https://github.com/mmig/speech-to-flac, https://github.com/mmig/libflac.js)
        [x] refactor index.js (see: TECHNICAL HEALTH)
        [x] merge refactor branch into master branch
        [x] rebase FLAC branch on top of master branch @done(18-07-31 12:25)
          [x] automatically merge
          [x] fix conflicts
          [x] diff file(s) from original branch to current branch
          [x] fix any logical errors to restore functionality of branch
          [x] merge temporary rebase branch back to FLAC branch @started(18-07-31 11:01) @done(18-07-31 12:25) @lasted(1h24m10s)
        [ ] hook up record.js events to UI using record/record.js as a guide
          [x] figure out next steps
          [x] study code
          [x] figure out additional steps
          [x] change Record button and disable other controls when recording starts @started(18-07-31 13:31) @done(18-07-31 14:45) @lasted(1h14m33s)
            [x] record.js: pass in onRecordStart
            [x] record.js: add logic to execute onRecordStart
            [x] index.js: hook up above
            [x] test
            [x] fix bugs
          [x] change Record button and enable other controls when recording stops
            [x] record.js: pass in onRecordStop
            [x] record.js: add logic to execute onRecordStop
            [x] index.js: hook up above
            [x] test
            [x] fix bugs
          [x] attempt to move container object inside of record.js @started(18-08-02 10:55) @done(18-08-02 11:25) @lasted(30m42s)
            [x] identify steps
            [x] record.js: override with local copy of container, fix any return value
            [x] test
            [x] index.js: do not pass in container, fix handling of return value
            [x] test
            [x] record.js: delete parameter for container
            [x] index.js: delete argument for container
            [x] test
          [x] update UI timer while recording @started(18-08-02 15:34) @done(18-08-02 17:36) @lasted(2h2m26s)
            [x] record.js: pass in onDataAvailable
            [x] record.js: add logic to execute onDataAvailable
            [x] index.js: hook up above
            [x] test
          [x] upload FLAC file instead of forcing a download
            [x] record.js: do not call forceDownload()
            [x] expose forceDownload() for later usage
            [x] hook up upload
          [ ] record.js: get rid of getUserMedia() code if determined that it's not needed
            [x] record.js: study getUserMedia() code
            [x] determine next steps
            [x] expose gotUserMedia()
            [x] call gotUserMedia()
            [x] test
            [ ] refactor
          [ ] change UI when there is an error
            [ ] record.js: pass in onRecordError
            [ ] record.js: add logic to execute onRecordError
            [ ] index.js: hook up above
            [ ] test
            [ ] fix bugs
          [ ] fix bugs introduced by UI timer
            [ ] clicking record and then stop repeatedly immediately after seems to cause a hang
            [ ] consider using "recording" flag if async issue
            [ ] update UI (especially timer) independent of onDataAvailable (right now it's thrashing since it is SO often)
              [ ] just use setTimeout() instead
          [ ] figure out additional steps
          [ ] make the two record.js APIs look alike as possible
          [ ] address this TODO: force this state for now; should rely on callback setting it from inside record.js, though
          [ ] merge two onDataAvailable functions
          [x] look into if multiple web workers are spawned
            [x] yes
        [ ] revisit timing and location of onRecordStart() dispatch. seems to take a while before initialization occurs; consider having two callbacks instead, or changing the UI preemptively (e.g., optimistic updates)
        [ ] fix rerendering
        [ ] clean up
        [-] merge record.js with main.js
      [ ] test for async issues
      [ ] map out the data flow to ferret out issues
      [ ] show user visual indicator that they can't change noises while recording @ux
      [ ] check if we are changing the UI without relying on the recorder response (changing the state of the Record button immediately, for instance)



  
  PLANNED:
    [ ] show 15-second countdown to user on record in lieu of pacing timeline for MVP
    [ ] license agreement akin to Mozilla's (Ryan is taking care of this for now)
    
  ICEBOX:
    [ ] show user (a more obvious) visual indicator that a noise has been recorded @ux
    [ ] add wizard (easy sequential navigation) @ux
    [ ] simple text "pacing" timeline @ux
      [ ] change noises data structure to allow for pauses and prompts
      [ ] show user a timeline for visual prompts
      [ ] show user basic visual prompts for recording a noise
      [ ] integrate new sample sounds
    [ ] fix status and time being disabled right after upload (they shouldn't be) @ux
    [ ] complex graphic timeline @ux
      [ ] show user an animated timeline a la rhythm games
    [ ] accessibility @a11y
      [ ] add simple keyboard shortcuts for accessibility
      [ ] replace built-in audio controls with custom ones for accessibility (e.g., https://developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia#Creating_custom_audio_and_video_controls)
    [ ] allow user to review and submit @ux
    [ ] allow user to select mic ("zero; browsers have that ui")

  DONE:
    [x] prevent user from changing noises while recording
    [x] get basic happy path working
    [x] allow user to record multiple noises
    [x] load data
    [x] update UI when done recording, and uploading
    [x] load noise info from data json
    [x] add navigation arrows as a precursor to the wizard
    [x] ask for microphone permission on record instead of on load (see: https://developers.google.com/web/fundamentals/media/recording-video/#ask_permission_to_use_camera_responsibly,https://developers.google.com/web/fundamentals/media/recording-video/#use_the_permissions_api_to_check_if_you_already_have_access)
    [x] get FLAC sample code working (e.g., https://github.com/mmig/speech-to-flac, https://github.com/mmig/speech-to-flac.js)


TECHNICAL HEALTH:

  IN PROGRESS:

  PLANNED:
    [ ] refactor index.js further
      [ ] state management
        [ ] move state management into a different file
        [ ] make it so that selected noise points to one of the actual noises? and that "selected" is a property of one of them
      [ ] componentize
        [ ] move arrows out of recorder.js
      [ ] event handling
      [ ] I/O and effects
        [ ] figure out the correct data flow for recorder I/O
          [ ] fix the workarounds that abuse state
          [ ] test above
        [ ] move rest of I/O out
    [ ] fix weird remote branch
    [ ] auto-rerender on state change    
    [ ] split out CSS by "component"
    [ ] determine if we need to also refactor for list interaction
    [ ] add development web server for automatically reloading on save of static files
    [ ] add build step so that we can use packages more easily, minify, etc
      [ ] alternatively, append version number to everything
    [-] update requirements.txt

  ICEBOX:
    [ ] test scenarios
    [ ] fallback to <input>
    [ ] add debouncing
    [ ] add polyfills and fallbacks
      [ ] getUserMedia() - https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Using_the_new_API_in_older_browsers, https://github.com/webrtc/adapter
    [ ] productionize
      [ ] minify/uglify
      [ ] bust caches!
      [ ] gzip
    [ ] replace libflac3*.strict.js with official fix for strict mode when following issue is resolved (https://github.com/mmig/libflac.js/issues/4)
    [ ] test supported desktop browsers
    [ ] smoke test and fix mobile browsers
    [ ] address TODOs
      [ ] convert noise constants to simple boolean
    [ ] fix console errors
    [ ] remove console debugging statements
    [ ] rename on<Action> arguments to be different from parameters
    [ ] optimize
      [ ] event delegation
      [ ] DOM manipulation with fragments
      [ ] virtual DOM
      [ ] DOM diffing

  DONE:
    [x] refactor index.js so that event handling, state management, and UI updates for record/stop are more decoupled
      [x] state management
        [x] move state management to one place in main.js
          [x] create update state function
          [x] move clone() and deepMerge() out to snippets
          [x] migrate state management to use update state function
      [x] componentize
        [x] separate UI code out from main.js
          [x] move UI code to own functions
          [x] move functions to own file
          [x] move "sub-component" references to new file
      [x] I/O and effects
        [x] identify I/O
        [x] move recorder I/O outside of index.js
          [x] move to same place in index.js
          [x] move out of index.js
            [x] move recording code to new file record.js
            [x] isolate recorder-specific code from other code
            [x] tag what to do with each piece
            [x] move code within record.js
            [x] move other code back into app.js
            [x] test for regressions and fix bugs
            [x] clean up relevant TODOs
              [x] misc TODOs
              [x] merge updateRecordButton with renderButton
                [x] test above
                [x] add missing status into recorder.js
                [x] test above
                [x] pass missing args to renderRecordingControls etc
                [x] separate out recorder status from noise status so that we can do onRecordClick properly
                  [x] refactor constants so easier to extend and use
                  [x] create new constants just for noises
                  [x] point noises to the new constants
                  [x] change any logic where we set the recorder status to be the noise status or vice versa
                [x] merge onRecordClick and onFirstRecordClick (requires that we maintain recorder.status properly)
                  [x] hack together by having placeholders for startRecorder() and stopRecorder()
                  [x] fix switching noises not resetting the recorder
                    [x] identify issue
                    [x] come up with sol'n
                    [x] code sol'n
                    [x] clean up
                  [x] fix button to be record "circle" when done uploading
                  [x] fix record button being enabled when the sound is already recorded
                  [x] fix status saying "already recorded" instead of "uploaded" too soon
    [x] refactor into modules
    [x] replace libflac3*.strict.js with official fix for strict mode when following issue is resolved (https://github.com/mmig/libflac.js/issues/4)
    [x] separate recorder status from clip status, then can use NEED_PERMISSIONS permission appropriately


Archive:
